workflows:
  ios-workflow:
    name: iOS Workflow
    environment:
      xcode: latest
      cocoapods: default
      vars:
        XCODE_PROJECT: "TravelExpenses.xcodeproj"
        XCODE_SCHEME: "TravelExpenses"
        BUNDLE_ID: "com.ifly.TravelExpenses.TravelExpenses"
        APP_STORE_CONNECT_ISSUER_ID: $APP_STORE_CONNECT_ISSUER_ID
        APP_STORE_CONNECT_API_KEY_ID: $APP_STORE_CONNECT_API_KEY_ID
        APP_STORE_CONNECT_API_KEY: $APP_STORE_CONNECT_API_KEY
        CERTIFICATE_PRIVATE_KEY: $CERTIFICATE_PRIVATE_KEY
        CERTIFICATE_PASSWORD: $CERTIFICATE_PASSWORD
        BUILD_CERTIFICATE_BASE64: $BUILD_CERTIFICATE_BASE64
        KEYCHAIN_PASSWORD: $KEYCHAIN_PASSWORD
        PROVISIONING_PROFILE_BASE64: $PROVISIONING_PROFILE_BASE64
        PROVISIONING_PROFILE_SPECIFIER: $PROVISIONING_PROFILE_SPECIFIER
        TEAM_ID: $TEAM_ID
        CODE_SIGN_IDENTITY: $CODE_SIGN_IDENTITY
      flutter: stable
      node: latest
    scripts:
      - name: Set up code signing settings on Xcode project
        script: |
          # set up provisioning profiles
          PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILES_HOME"
          PROFILE_PATH="$(ls $PROFILES_HOME | head -n 1)"
          PROFILE_NAME="${PROFILE_PATH%.*}"
          uuid=$(grep -a -A 1 "UUID" "$PROFILES_HOME/$PROFILE_PATH" | grep -o "[-A-Za-z0-9]\{36\}")
          cp "$PROFILES_HOME/$PROFILE_PATH" "$PROFILES_HOME/$uuid.mobileprovision"
          
          # set up signing certificate
          echo $BUILD_CERTIFICATE_BASE64 | base64 --decode > /tmp/build_certificate.p12
          echo $CERTIFICATE_PRIVATE_KEY | base64 --decode > /tmp/certificate_private_key.p12
          
          # create keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -l ~/Library/Keychains/build.keychain
          
          # import certificate to keychain
          security import /tmp/build_certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security import /tmp/certificate_private_key.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          
          # update project settings
          /usr/libexec/PlistBuddy -c "Set :objects:$TEAM_ID:buildSettings:CODE_SIGN_STYLE Manual" "$XCODE_PROJECT/project.pbxproj"
          /usr/libexec/PlistBuddy -c "Set :objects:$TEAM_ID:buildSettings:DEVELOPMENT_TEAM $TEAM_ID" "$XCODE_PROJECT/project.pbxproj"
          /usr/libexec/PlistBuddy -c "Set :objects:$TEAM_ID:buildSettings:CODE_SIGN_IDENTITY $CODE_SIGN_IDENTITY" "$XCODE_PROJECT/project.pbxproj"
          /usr/libexec/PlistBuddy -c "Set :objects:$TEAM_ID:buildSettings:PROVISIONING_PROFILE_SPECIFIER $PROVISIONING_PROFILE_SPECIFIER" "$XCODE_PROJECT/project.pbxproj"
          /usr/libexec/PlistBuddy -c "Set :objects:$TEAM_ID:buildSettings:PRODUCT_BUNDLE_IDENTIFIER $BUNDLE_ID" "$XCODE_PROJECT/project.pbxproj"
      - name: Get iOS code signing files
        script: |
          # download code signing files from Codemagic
          echo "Downloading code signing files..."
          keychain_password="$KEYCHAIN_PASSWORD"
          
          # Create variables
          app-store-connect create-api-key --file /tmp/api_key.json --issuer-id $APP_STORE_CONNECT_ISSUER_ID --key-id $APP_STORE_CONNECT_API_KEY_ID --private-key "$APP_STORE_CONNECT_API_KEY"
          
          # Set up keychain
          security create-keychain -p "$keychain_password" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$keychain_password" build.keychain
          security set-keychain-settings -t 3600 -l ~/Library/Keychains/build.keychain
          
          # Import certificates
          echo $BUILD_CERTIFICATE_BASE64 | base64 --decode > /tmp/build_certificate.p12
          security import /tmp/build_certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          
          # Set up provisioning profiles
          PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILES_HOME"
          echo $PROVISIONING_PROFILE_BASE64 | base64 --decode > /tmp/build_pp.mobileprovision
          cp /tmp/build_pp.mobileprovision "$PROFILES_HOME"
          
          # Set partition list
          security set-key-partition-list -S apple-tool:,apple: -s -k "$keychain_password" build.keychain
      - name: Build iOS app
        script: |
          # Build the app
          xcodebuild -project "$XCODE_PROJECT" \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -destination 'generic/platform=iOS' \
            -archivePath /tmp/build/TravelExpenses.xcarchive \
            clean archive
      - name: Create iOS build artifacts
        script: |
          # Create .ipa file
          xcodebuild -exportArchive \
            -archivePath /tmp/build/TravelExpenses.xcarchive \
            -exportPath /tmp/build/ios \
            -exportOptionsPlist /tmp/exportOptions.plist
          
          # Create export options plist
          cat > /tmp/exportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>$TEAM_ID</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>$BUNDLE_ID</key>
                  <string>$PROVISIONING_PROFILE_SPECIFIER</string>
              </dict>
              <key>signingCertificate</key>
              <string>$CODE_SIGN_IDENTITY</string>
          </dict>
          </plist>
          EOF
      - name: Publish to App Store Connect
        script: |
          # Upload to App Store Connect
          xcrun altool --upload-app \
            --type ios \
            --file "/tmp/build/ios/TravelExpenses.ipa" \
            --username "$APP_STORE_CONNECT_USERNAME" \
            --password "$APP_STORE_CONNECT_APP_SPECIFIC_PASSWORD" \
            --verbose
    artifacts:
      - /tmp/build/ios/*.ipa
      - /tmp/build/TravelExpenses.xcarchive
    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_ID
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
        submit_to_app_store: false 